/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package tnchecker;

import de.abas.ceks.jedp.CantBeginSessionException;
import de.abas.ceks.jedp.EDPFactory;
import de.abas.ceks.jedp.EDPQuery;
import de.abas.ceks.jedp.EDPSession;
import de.abas.ceks.jedp.InvalidQueryException;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import microsoft.exchange.webservices.data.Appointment;
import microsoft.exchange.webservices.data.CalendarFolder;
import microsoft.exchange.webservices.data.CalendarView;
import microsoft.exchange.webservices.data.ExchangeService;
import microsoft.exchange.webservices.data.ExchangeVersion;
import microsoft.exchange.webservices.data.FindItemsResults;
import microsoft.exchange.webservices.data.FolderId;
import microsoft.exchange.webservices.data.Mailbox;
import microsoft.exchange.webservices.data.Sensitivity;
import microsoft.exchange.webservices.data.WebCredentials;
import microsoft.exchange.webservices.data.WellKnownFolderName;

/**
 *
 * @author gdenz
 */
public class TNCheckerUI extends javax.swing.JFrame {

    /**
     * Creates new form TNCheckerUI
     */ 
    private DefaultMutableTreeNode rootnode;
    private DefaultTreeModel treeModel;
    private DefaultMutableTreeNode BetrNode;
    private DefaultMutableTreeNode MaNode;
    private DefaultMutableTreeNode TeamNode;
      
    public TNCheckerUI() {
        initComponents();
        //DB erzeugen
        DBInit();
        InitValues_READ();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCalPanelMain = new javax.swing.JPanel();
        jPanel1 = new CalPanel();
        jXDatePickerVon = new org.jdesktop.swingx.JXDatePicker();
        jXDatePickerbis = new org.jdesktop.swingx.JXDatePicker();
        jButton2 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TNChecker");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jButton1.setText("Sync");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Datum", "TN Zeit", "Exchange Zeit", "Urlaubszeit", "Krankheit", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setMaximumSize(new java.awt.Dimension(500, 0));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(4).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(5).setMaxWidth(50);
        }
        jTable1.setDefaultRenderer( Float.class, new ColorTableCellRenderer() );

        jTabbedPane1.addTab("Tabellarisch", jScrollPane2);

        jCalPanelMain.setPreferredSize(new java.awt.Dimension(550, 511));
        jCalPanelMain.setLayout(new javax.swing.BoxLayout(jCalPanelMain, javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1245, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 716, Short.MAX_VALUE)
        );

        jCalPanelMain.add(jPanel1);

        jTabbedPane1.addTab("Grafisch", jCalPanelMain);

        jXDatePickerVon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePickerVonActionPerformed(evt);
            }
        });

        jXDatePickerbis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePickerbisActionPerformed(evt);
            }
        });

        jButton2.setText("Mail senden");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Einstellungen");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1250, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(586, 586, 586)
                .addComponent(jXDatePickerVon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jXDatePickerbis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(265, 265, 265))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jXDatePickerVon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXDatePickerbis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            String betriebsstaette;
            betriebsstaette = "";
            String kst;
            kst="";
            int iResult;
                int monat;
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yy", Locale.GERMANY);
            
            //DB Starten
              Connection connection = DB_CONNECT();
              Statement xstatement = connection.createStatement();      
               iResult = xstatement.executeUpdate("DELETE  FROM URLAUB ");
               iResult = xstatement.executeUpdate("DELETE  FROM KRANKHEIT ");
               iResult = xstatement.executeUpdate("DELETE  FROM TN ");
               iResult = xstatement.executeUpdate("DELETE  FROM EXCHANGECAL ");
            // jxDatePicker auslesen und umwandeln
            
             Calendar ZeitraumVon=new GregorianCalendar();
             ZeitraumVon.setTime(jXDatePickerVon.getDate());
             //String Von=ZeitraumVon.get(Calendar.DATE)+"."+ZeitraumVon.get(Calendar.MONTH)+"."+ZeitraumVon.get(Calendar.YEAR);
             
             Calendar ZeitraumBis=new GregorianCalendar();
             ZeitraumBis.setTime(jXDatePickerbis.getDate());
             //String Bis=ZeitraumBis.get(Calendar.DATE)+"."+ZeitraumBis.get(Calendar.MONTH)+"."+ZeitraumBis.get(Calendar.YEAR);
             Calendar Kalender=new GregorianCalendar();
             Kalender.setTime(ZeitraumVon.getTime());
             Kalender.add(Calendar.DATE, -100);
        
            monat=Kalender.get(Calendar.MONTH);
            monat=monat+1;
             String UrlaubVon=Kalender.get(Calendar.DATE)+"."+monat +"."+Kalender.get(Calendar.YEAR);
             String Von=sdf.format(ZeitraumVon.getTime());
             String Bis=sdf.format(ZeitraumVon.getTime());
             
            rootnode = new DefaultMutableTreeNode("abas");
            //Session Aufbauen
            EDPSession edpsession = SessionAufbauen();
            // Alle Mitarbeiter abholen
            EDPQuery edpQMa = edpsession.createQuery();
            edpQMa.startQuery("11:1","","austr=`;ymaart=Eigener Mitarbeiter;@ordnung=yvkstelle^nummer","such,ybetrstaette,name,yvkstelle^name,yvkstelle^nummer, email") ;
             treeModel = new DefaultTreeModel(rootnode);
            jTree1.setModel(treeModel);
           
            //Mitarbeiter selektieren
            while (edpQMa.getNextRecord()) {
                if (edpQMa.getField(5).startsWith("3060")||edpQMa.getField(5).startsWith("3070")||edpQMa.getField(5).startsWith("3080")||edpQMa.getField(5).startsWith("2010")||edpQMa.getField(5).startsWith("2020")||edpQMa.getField(5).startsWith("2030")||edpQMa.getField(5).startsWith("2040")||edpQMa.getField(5).startsWith("2050"))
                {
                     String email=edpQMa.getField(6);
                    email=email.replace("abas.de", "abasag.intra");
                   
                 System.out.println(edpQMa.getField(1)+" "+edpQMa.getField(2)+" "+email);
                 if (!edpQMa.getField(2).equals (""))
                    {
          
                    if (!kst.equals(edpQMa.getField(4)))
                        {
                         kst=edpQMa.getField(4);
                         TeamNode =   new DefaultMutableTreeNode(edpQMa.getField(4));
                        rootnode.add(TeamNode);
                        }
                          
                    //MaNode = new DefaultMutableTreeNode(edpQMa.getField(3));
                    //TeamNode.add(MaNode);
                   
                   
                   /* if (email.equals("Martin.Musselmann@abas.de")) {email="M.Musselmann@abas-projektierung.de"; }
                    if (email.equals("Patrick.Steup@abas.de")) {email="P.Steup@abas-projektierung.de"; }
                    if (email.equals("Eldert.Janssen@abas.de")) {email="E.Janssen@abas-projektierung.de"; }
                    if (email.equals("Michael.Becker@abas.de")) {email="M.Becker@abas-projektierung.de"; 
                    if (email.equals("shertel@abas.de")) {email="Sven.Hertel@abas.de";}*/
                    
                    MaNode = new DefaultMutableTreeNode(new MitarbeiterX(edpQMa.getField(1),edpQMa.getField(3),"XX",edpQMa.getField(6)));
                    ExchangeKalender(email,edpQMa.getField(1),jXDatePickerVon.getDate(),jXDatePickerbis.getDate(),connection);
                    TeamNode.add(MaNode);
                   

                    }
                }            
             }
            // Urlaub im Zeitraum Selektieren
            //<(Employee)> %,,0:nummer=;0:such=;0:sucherw~`;1:anf=20150301!;1:end=;1:yfzminus=;1:yfzstdplusmin=;1:yurlminus=;@gruppe=1;@ablageart=(Active);@zeilen=(Yes) <(View)>
            
            //edpQMa.startQuery("11:1","","austr=`;ymaart=Eigener Mitarbeiter;anf="+Von+";end="+Bis+";@zeilen=(Yes)","yvkstelle^nummer,name,anf, ende,yurlminus") ;
            edpQMa.startQuery("11:1","","austr=`;ymaart=Eigener Mitarbeiter;anf="+UrlaubVon+"!;yurlminus=0.5!;@zeilen=(Yes)","yvkstelle^nummer,such,name,anf, end,yurlminus") ;
           // System.out.println(UrlaubVon);
            while (edpQMa.getNextRecord()) {
                if (edpQMa.getField(1).startsWith("3")||edpQMa.getField(1).startsWith("4"))
                {
                 System.out.println(edpQMa.getField(2)+" "+edpQMa.getField(3)+" "+edpQMa.getField(4)+" / "+edpQMa.getField(5));
                 //Von Bis Urlaub in einzelne Tage aufsplitten
              Calendar KalenderVon=Calendar.getInstance();
              Calendar KalenderBis=Calendar.getInstance();
              
              KalenderVon.setTime(sdf.parse(edpQMa.getField(4)));//
              if (edpQMa.getField(5).equals("")) 
              {
               KalenderBis.setTime(KalenderVon.getTime());    
              }
              else 
              {
              KalenderBis.setTime(sdf.parse(edpQMa.getField(5)));//
              }
                      while (KalenderVon.compareTo(KalenderBis)<=0) 
              {
                  System.out.println(KalenderVon.getTime()+"/"+ZeitraumVon.getTime());
                  //Datensatz in SQL anlegen
                  if ((KalenderVon.compareTo(ZeitraumVon)>=0) && (KalenderVon.compareTo(ZeitraumBis)<=0))
                  {
                  // In Urlaubs DB eintragen
                    iResult = xstatement.executeUpdate("INSERT INTO URLAUB (MITARBEITER,DATUM) Values ('" + edpQMa.getField(2)+ "','" + new java.sql.Date(KalenderVon.getTimeInMillis())+"')");              
                  }
                  //KalenderVon erhöhen um einen Tag
                  KalenderVon.add(Calendar.DAY_OF_YEAR,1);      
              }
              
                }}
            //Krankheit
               edpQMa.startQuery("11:1","","austr=`;ymaart=Eigener Mitarbeiter;anf="+UrlaubVon+"!;ykrank=1!;@zeilen=(Yes)","yvkstelle^nummer,such,name,anf, end,ykrank") ;
            while (edpQMa.getNextRecord()) {
                if (edpQMa.getField(1).startsWith("3")||edpQMa.getField(1).startsWith("4"))
                {
                 System.out.println(edpQMa.getField(2)+" "+edpQMa.getField(3)+" "+edpQMa.getField(4)+" / "+edpQMa.getField(5));
                 //Von Bis Urlaub in einzelne Tage aufsplitten
              Calendar KalenderVon=Calendar.getInstance();
              Calendar KalenderBis=Calendar.getInstance();
              
              KalenderVon.setTime(sdf.parse(edpQMa.getField(4)));//
              if (edpQMa.getField(5).equals("")) 
              {
               KalenderBis.setTime(KalenderVon.getTime());    
              }
              else 
              {
              KalenderBis.setTime(sdf.parse(edpQMa.getField(5)));//
              }
                      while (KalenderVon.compareTo(KalenderBis)<=0) 
              {
                  System.out.println(KalenderVon.getTime()+"/"+ZeitraumVon.getTime());
                  //Datensatz in SQL anlegen
                  if ((KalenderVon.compareTo(ZeitraumVon)>=0) && (KalenderVon.compareTo(ZeitraumBis)<=0))
                  {
                  // In Urlaubs DB eintragen
                    iResult = xstatement.executeUpdate("INSERT INTO KRANKHEIT (MITARBEITER,DATUM) Values ('" + edpQMa.getField(2)+ "','" + new java.sql.Date(KalenderVon.getTimeInMillis())+"')");              
                  }
                  //KalenderVon erhöhen um einen Tag
                  KalenderVon.add(Calendar.DAY_OF_YEAR,1);      
              }
              
                }}
            //Ende Krankheit
             Von=sdf.format(ZeitraumVon.getTime());
             Bis=sdf.format(ZeitraumBis.getTime());
              // Alle TN's aus abas im Zeitraum abholen
             //<(File26)> %,,0:nummer=;0:such=;0:sucherw~`;1:ytnbis=;1:ytnkunde=;1:ytnmitarb=;1:ytnvon=;@gruppe=2;@ablageart=(Active);@zeilen=(Yes) <(View)>
               edpQMa.startQuery("47:2","","ytndatum="+Von+"!"+Bis+";@zeilen=(Yes)","ytnmitarb,ytndatum,ytnkunde,ytnvon,ytnbis") ;
               while (edpQMa.getNextRecord()) 
                {
                   
                     //Mitarbeiter,datum, Kunde, von, bis
                      sdf= new SimpleDateFormat ("dd.MM.yy");
                    Date mydatum=sdf.parse(edpQMa.getField(2));
                     java.sql.Date sqlDate = new java.sql.Date(mydatum.getTime());

                    sdf= new SimpleDateFormat ("HH:mm");
                   System.out.println(edpQMa.getField(4)+" /" + edpQMa.getField(5)); 
                  // Nur TN's von InvoiceIT , Manuelle TN's erst mal nicht
                   if ((!edpQMa.getField(4).equals("")) && (!edpQMa.getField(5).equals("")))
                           {
                    java.sql.Time myVonTime = java.sql.Time.valueOf(edpQMa.getField(4).trim()+":00");
                    java.sql.Time myBisTime = java.sql.Time.valueOf(edpQMa.getField(5).trim()+":00");
                    
                      System.out.println(edpQMa.getField(1)+"/"+myVonTime+" /" + myBisTime+"/"+mydatum);         
                     iResult = xstatement.executeUpdate("INSERT INTO TN (MITARBEITER,DATUM, Kunde, von, bis) Values ('" + edpQMa.getField(1)+ "','" + sqlDate+"','" + edpQMa.getField(3)+"','" + myVonTime+"','" + myBisTime+"')");              
                           }
                }
               edpsession.endSession();
               
            
            //exchange selektieren im Zeitraum
            
            //Session Schliessen
            
            
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));               
                       
            
        } catch (InvalidQueryException ex) {
            Logger.getLogger(TNCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(TNCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(TNCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
 
        //Einstellungen Fenster aufrufen
        JFrame mainFrame = this;
        Einstellungen XE = new Einstellungen(mainFrame, true, GlobalVars.edpHost, Integer.toString(GlobalVars.edpPort), GlobalVars.edpMandant, GlobalVars.edpPasswort, GlobalVars.mitarbeiter, GlobalVars.exchange, GlobalVars.exchuser, GlobalVars.exchpass, GlobalVars.internFirma, GlobalVars.openTreeKunde, GlobalVars.exchangeCalSuche, GlobalVars.updateLocation,GlobalVars.filosofie);
        String sedpPort = (Integer.toString(GlobalVars.edpPort));
        XE.setVisible(true);
        GlobalVars.edpHost = XE.getHost();
        GlobalVars.edpPort = XE.getPort();
        GlobalVars.edpMandant = XE.getMandant();
        GlobalVars.edpPasswort = XE.getPasswort();
        GlobalVars.exchange = XE.getExchange();
        GlobalVars.exchuser = XE.getExchuser();
        GlobalVars.exchpass = XE.getExchpass();
        GlobalVars.updateLocation = XE.getUpdateLocation();

        InitValues_WRITE();
        
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void jXDatePickerVonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePickerVonActionPerformed
         
         Calendar Kalender=new GregorianCalendar();
         Kalender.setTime(jXDatePickerVon.getDate());
         int dayofweek=Kalender.get(Calendar.DAY_OF_WEEK);
         
         if (dayofweek!=1) 
            {  
              Kalender.add(Calendar.DAY_OF_YEAR, -dayofweek+2);
            }
         jXDatePickerVon.setDate(Kalender.getTime());
         
    }//GEN-LAST:event_jXDatePickerVonActionPerformed

    private void jXDatePickerbisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePickerbisActionPerformed
   Calendar Kalender=new GregorianCalendar();
         Kalender.setTime(jXDatePickerbis.getDate());
         int dayofweek=Kalender.get(Calendar.DAY_OF_WEEK);
         
         if (dayofweek!=1) 
            {  
              Kalender.add(Calendar.DAY_OF_YEAR, 7-dayofweek+1);
            }
         jXDatePickerbis.setDate(Kalender.getTime());
               
    }//GEN-LAST:event_jXDatePickerbisActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        String name;    
        int tageszeit=0;
        int urlaubszeit=0;
        int krankheit=0;
        int exchangezeit=0;
        Date datumakt=null;
        Date datumold=null;
      /* 
     	Calendar testDate = GregorianCalendar.getInstance();
        testDate.set(2015, 11, 25);
        HolidayManager manager = HolidayManager.getInstance(HolidayCalendar.GERMANY);
        Set<de.jollyday.Holiday> holidays = manager.getHolidays(2015, "Baden");
        for (Iterator<de.jollyday.Holiday> it = holidays.iterator(); it.hasNext();) {
            de.jollyday.Holiday h = it.next();
            System.out.println(h.getDescription()+" ");
        }
        System.out.println(manager.isHoliday(testDate, "Baden"));
        //.getInstance(HolidayCalendar.UNITED_STATES);
       */
//  Name gewählt, alles darstellen
         DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
            if (node == null) {
                //NOthing selected
                return;
            } else {
                Object nodeInfo = node.getUserObject();
                 if (node.isLeaf())
                 {
                    
                        //name=node.getUserObject().toString();
                        // Schleife im Zeitraum 
                      jPanel1.repaint();
                      if (nodeInfo instanceof MitarbeiterX) {
                         try {
                             MitarbeiterX mitarbeiter = (MitarbeiterX) nodeInfo;
                     
                             Connection connection = DB_CONNECT();
                     
                        // TableModel abholen
                     DefaultTableModel  model =(DefaultTableModel) jTable1.getModel();
                     // Tabellenzeilen löschen
                     model.setNumRows(0);
                           
                             
                     //Selekt die TN des Tages
                      //java.sql.Date sqldatum= new java.sql.Date(jXDatePickerVon.getDate().getTime());
                      Calendar c = Calendar.getInstance();
                      c.setTime(jXDatePickerVon.getDate());
                      
                     while (c.getTime().compareTo(jXDatePickerbis.getDate())!=1 )
                     {
                         //TN Selektieren
                     PreparedStatement pstatement = connection.prepareStatement("SELECT * FROM TN WHERE DATUM  =? AND MITARBEITER= ? ORDER BY DATUM ASC");
                     pstatement.setDate(1,new java.sql.Date(c.getTimeInMillis()));
                     pstatement.setString(2, mitarbeiter.such);
                     ResultSet rs = pstatement.executeQuery();
                     //Tageszeit erst mal auf Null zurücksetzen
                     tageszeit=0;
                     urlaubszeit=0;
                     exchangezeit=0;
                     krankheit=0;
                     while (rs.next()) 
                        {
                           //System.out.println(rs.getString(1));
                            System.out.println(rs.getString(2));
                            System.out.println(rs.getDate(3));
                            System.out.println(rs.getString(4));
                            System.out.println(rs.getTime(5));
                            System.out.println(rs.getTime(6));
                            long differenz=(rs.getTime(6).getTime()-rs.getTime(5).getTime())/1000/60/60;
                            tageszeit=(int) (tageszeit+differenz);
                        }   
                    
                     // Urlaub
                     
                     pstatement = connection.prepareStatement("SELECT * FROM URLAUB WHERE DATUM  =? AND MITARBEITER= ? ORDER BY DATUM ASC");
                     pstatement.setDate(1,new java.sql.Date(c.getTimeInMillis()));
                     pstatement.setString(2, mitarbeiter.such);
                     rs = pstatement.executeQuery();
                     while (rs.next())
                             {
                                urlaubszeit=8; 
                             }
                     
                     pstatement = connection.prepareStatement("SELECT * FROM KRANKHEIT WHERE DATUM  =? AND MITARBEITER= ? ORDER BY DATUM ASC");
                     pstatement.setDate(1,new java.sql.Date(c.getTimeInMillis()));
                     pstatement.setString(2, mitarbeiter.such);
                     rs = pstatement.executeQuery();
                     while (rs.next())
                             {
                                krankheit=8; 
                             }
                     
                     //Exchange
                     pstatement = connection.prepareStatement("SELECT * FROM EXCHANGECAL WHERE DATUM  =? AND MITARBEITER= ? ORDER BY DATUM ASC");
                     pstatement.setDate(1,new java.sql.Date(c.getTimeInMillis()));
                     pstatement.setString(2, mitarbeiter.such);
                     rs = pstatement.executeQuery();
                     while (rs.next())
                             {      
                                 long differenz=(rs.getTime(4).getTime()-rs.getTime(3).getTime())/1000/60/60;
                            exchangezeit=(int) (exchangezeit+differenz);
                             }
                     
                     
                     
                    
                     //Ausgabe in Tabelle
                     SimpleDateFormat sdf = new SimpleDateFormat("EEE dd.MM.yy", Locale.GERMANY);
                     model.addRow(new Object[]{sdf.format(c.getTime()),tageszeit,exchangezeit,urlaubszeit,krankheit,Boolean.FALSE});
                     c.add(Calendar.DATE,1);
                     }
                     //jPanel1.revalidate();
                         } catch (SQLException ex) {
                             MyException(ex.toString());
                         }
                    
                    
                    
                    
                 }
            }
            }
    }//GEN-LAST:event_jTree1ValueChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
     boolean xb;
        String inhalt="";
     int i=0;
     for (i=0;i<jTable1.getRowCount();i++)
     {
         //System.out.println(jTable1.getValueAt(i, 5).toString());
       
         xb=((Boolean)jTable1.getValueAt(i,5));
         if (xb==Boolean.TRUE)
         {
            inhalt=inhalt+jTable1.getValueAt(i,0).toString()+"\n";
         }
                /* if (jTable1.getValueAt(i, 5) == Boolean.TRUE);
        {
            inhalt=inhalt+jTable1.getValueAt(i,0).toString()+"\n";
        }*/
        /* if (xb) 
         {
             inhalt=inhalt+jTable1.getValueAt(i,0).toString();
         }*/
      /*  if ((boolean)jTable1.getValueAt(i, 6))
         {
           inhalt=inhalt+jTable1.getValueAt(i,0).toString();
         }
*/     }
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
            if (node == null) {
                //NOthing selected
                return;
            } else {
                Object nodeInfo = node.getUserObject();
                 if (node.isLeaf())
                 {
                      if (nodeInfo instanceof MitarbeiterX) 
                      {
                          try {
                              MitarbeiterX mitarbeiter = (MitarbeiterX) nodeInfo;
                              //inhalt="test%20XXX";
                              inhalt="Hallo "+mitarbeiter.name.substring(0,mitarbeiter.name.indexOf(" ")) +",\nan folgenden Tagen fehlen mir noch TNs, bzw. eine Info warum hier noch keine erstellt wurden.\n\n"+inhalt;
                              inhalt=inhalt+"\nDanke und viele Gruesse\n";
                              inhalt = java.net.URLEncoder.encode(inhalt, "utf-8").replace("+", "%20");;
                                      //.replace(" ", "%20");
                              Desktop.getDesktop().mail(  new URI(    "mailto:"+mitarbeiter.email+"?subject=Taetigkeitsnachweise&body="+inhalt));
                          } catch (IOException ex) {
                              Logger.getLogger(TNCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
                          } catch (URISyntaxException ex) {
                              Logger.getLogger(TNCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
                          }
                      }                
                 }
            }
    }//GEN-LAST:event_jButton2ActionPerformed
    
        
    private void ExchangeKalender(String email,String Mitarbeiter,Date startDate, Date endDate, Connection connection)
    { long xanf=0;
      long xend=0;
      Time siebenUhr=Time.valueOf("08:00:00");
      Time neunUhr=Time.valueOf("09:00:00");
      Time eineStunde=Time.valueOf("06:00:00");
        try {
               Calendar cal = new GregorianCalendar();
                                int timezoneOffset = (cal.get(Calendar.ZONE_OFFSET) + cal.get(Calendar.DST_OFFSET));
           
            ExchangeService service = null;
            service = new ExchangeService(ExchangeVersion.Exchange2010_SP1);
            //service.setUrl(new URI("https://topas/ews/Exchange.asmx"));
            service.setUrl(new URI(GlobalVars.exchange));
            service.setCredentials(new WebCredentials(GlobalVars.exchuser, GlobalVars.exchpass));
            
             CalendarFolder cf;
             cf = CalendarFolder.bind(service, new FolderId(WellKnownFolderName.Calendar, new Mailbox(email)));
          
             
             FindItemsResults<Appointment> findResults = cf.findAppointments(new CalendarView(startDate, endDate));
                for (Appointment appt : findResults.getItems()) {
                    if (appt.getSensitivity().compareTo(Sensitivity.Normal)==0)
                    {
                        
                            
                 //   System.out.println(appt.getSensitivity());
                System.out.println(appt.getStart().toString() + " - " + appt.getSubject());
                PreparedStatement    preparedStatement = connection.prepareStatement("INSERT INTO EXCHANGECAL VALUES (?,?,?,?,?)");
                if (appt.getIsAllDayEvent())
                {
                xanf=appt.getStart().getTime()+timezoneOffset+neunUhr.getTime();
                xend=appt.getEnd().getTime()+timezoneOffset-siebenUhr.getTime();
                }
                else
                { 
                if (email.equals("Isabell.Schaarschmidt@abas.de"))
                {
                   xanf=xanf; 
                }  
                xanf = appt.getStart().getTime()+timezoneOffset; 
                xend = appt.getEnd().getTime()+timezoneOffset; 
                SimpleDateFormat dfh =new SimpleDateFormat("HH:mm");
                 //SimpleDateFormat sdf = new SimpleDateFormat("EEE dd.MM.yy", Locale.GERMANY);
                if (dfh.format(xend).toString().equals("00:00"))
                {
                  xend=appt.getEnd().getTime()+timezoneOffset-eineStunde.getTime();  
                }
                
                }
                preparedStatement.setString(1, Mitarbeiter);
                preparedStatement.setDate(2, new java.sql.Date(xanf));
                preparedStatement.setTime(3, new java.sql.Time(xanf));
                preparedStatement.setTime(4, new java.sql.Time(xend));
                String Subjekt=appt.getSubject();
                if (Subjekt.length() >10 ) { Subjekt=Subjekt.substring(0,10);}
                preparedStatement.setString(5, Subjekt);
                preparedStatement.executeUpdate();
                    }
                    
                }
            // connection.close();
        } catch (URISyntaxException ex) {
            Logger.getLogger(TNCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(TNCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
        }
    }
    
    private EDPSession SessionAufbauen() {

        try {
            EDPSession session;
            session = EDPFactory.createEDPSession(3.43);
            session.beginSession(GlobalVars.edpHost,GlobalVars.edpPort, GlobalVars.edpMandant, GlobalVars.edpPasswort, "JEDP_0001");
            return session;
        } catch (CantBeginSessionException ex) {
            Logger.getLogger(TNCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
            JFrame mainFrame = this;
            JOptionPane.showMessageDialog(mainFrame, "Verbindungsaufnahme gescheitert\n\n" + ex, "EDP Fehler", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }
    
  public class CalPanel extends JPanel {

        @Override
        public void paintComponent(Graphics g) {
            
                String komponente;
                int ikomponente;
                int ywert = 21;
                int xmax=0;
                int ymax=0;
                int spalte=0;
                int zeile=0;
                int woche =0;
                int tag =0;
                FontMetrics fm;
                int width;
                int x1;
                int y1;
                int x2;
                int y2;
                int zeitlinien;
                Graphics2D g2= (Graphics2D)g;
                Connection connection=null;
               SimpleDateFormat sdf;
                SimpleDateFormat sdf2;
               MitarbeiterX mitarbeiter=null;
                
               DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
                        if (node == null) {
                        //NOthing selected
                        } else {
                        Object nodeInfo = node.getUserObject();
                        if (node.isLeaf())
                            { if (nodeInfo instanceof MitarbeiterX) {
                              mitarbeiter = (MitarbeiterX) nodeInfo;
                             connection = DB_CONNECT();
                             
                              
                Calendar kalendertag = new GregorianCalendar();
                kalendertag.setTime(jXDatePickerVon.getDate());
                sdf= new SimpleDateFormat("EEE dd.MM.yy",Locale.GERMANY);
                
                //DateFormat df;
          //df = DateFormat.getDateInstance
               //kalendertag.set(Calendar.DAY_OF_MONTH, 2);
                super.paintComponent(g);
                  xmax=this.getWidth()-1;
                ymax=this.getHeight()-1;
                 spalte=xmax/7;
                 zeile=ymax/4;
                zeitlinien=(zeile-20)/12;
                
                g2.setColor(new Color(185, 209, 234));
                g2.setColor(Color.WHITE);
                g2.fillRect(0, 0, this.getWidth(),this.getHeight());
               // g.setColor(Color.BLACK);
               //g.drawRect(0, 0, xmax,ymax);
                
                
                for (woche =1;woche<5;woche ++)
                {  
                 
                      //  System.out.println(x1+"/"+y1+"/"+x2+"/"+y3);  
                    for (tag=1;tag<8;tag ++)
                    {
                        x1=tag*spalte-spalte;
                        x2=tag*spalte;
                        y1=woche*zeile-zeile;
                        y2=woche*zeile;
                       
                        //Wochenende
                        if ((kalendertag.get(Calendar.DAY_OF_WEEK)==1)||(kalendertag.get(Calendar.DAY_OF_WEEK)==7)){
                         g2.setColor(new Color(240,240,240));  
                         g2.fillRect(x1,y1,spalte,zeile);   
                       }
                        
                        // Füllbereich für Datum 
                        g2.setColor(Color.lightGray);
                        g2.fillRect(x1,y1,spalte,20);
                       
                        //Kalender Rechteck
                       
                        
                          g2.setColor(Color.BLACK);
                        g2.drawRect(x1,y1,spalte,zeile);   
                        
                        g2.setColor(Color.BLACK);
                        g2.drawRect(x1,y1,spalte,zeile); 
                        g2.setColor(Color.lightGray);
                        g2.drawLine(tag*spalte-spalte/2, woche*zeile-zeile+20, tag*spalte-spalte/2,y2);
                      
                         //this.add(new JCheckBox("check")); 
                        //Highlight
                        //System.out.println(sdf.format(kalendertag.getTime()));
                         //sdf2= new SimpleDateFormat("dd.MM.yy",Locale.GERMANY); 
                        if (jTable1.getSelectedRow() !=-1)
                        {
                            if (jTable1.getValueAt( jTable1.getSelectedRow(),0).equals(sdf.format(kalendertag.getTime())))
                         {
                            Stroke oldStroke = g2.getStroke();
                            g2.setStroke(new BasicStroke(5));
                            g2.setColor(Color.RED); 
                            g2.drawRect(x1,y1,spalte,zeile); 
                            g2.setStroke(oldStroke);
                            
                         }
                        }
                        //Datum ausgeben
                        
                         g2.setColor(Color.BLACK);
                        fm = g2.getFontMetrics();
                        width=fm.stringWidth(sdf.format(kalendertag.getTime()));
                        g2.drawString(sdf.format(kalendertag.getTime()), (tag*spalte-spalte/2- width/2), woche*zeile-zeile+15);
                       
                        // Zeitlinien ausgeben
                        g2.setColor(Color.lightGray);
                        g2.drawLine(x1, y1+20+zeitlinien, x2,y1+20+zeitlinien);
                        g2.drawString("7", x1+5,y1+20+zeitlinien-2);
                        g2.drawLine(x1, y1+20+2*zeitlinien, x2,y1+20+2*zeitlinien);
                        g2.drawString("8", x1+5,y1+20+2*zeitlinien-2);
                        g2.drawLine(x1, y1+20+3*zeitlinien, x2,y1+20+3*zeitlinien);
                        g2.drawString("9", x1+5,y1+20+3*zeitlinien-2);
                        g2.drawLine(x1, y1+20+4*zeitlinien, x2,y1+20+4*zeitlinien);
                        g2.drawString("10", x1+5,y1+20+4*zeitlinien-2);
                        g2.drawLine(x1, y1+20+5*zeitlinien, x2,y1+20+5*zeitlinien);
                        g2.drawString("11", x1+5,y1+20+5*zeitlinien-2);
                        g2.drawLine(x1, y1+20+6*zeitlinien, x2,y1+20+6*zeitlinien);
                        g2.drawString("12", x1+5,y1+20+6*zeitlinien-2);
                        g2.drawLine(x1, y1+20+7*zeitlinien, x2,y1+20+7*zeitlinien);
                        g2.drawString("13", x1+5,y1+20+7*zeitlinien-2);
                        g2.drawLine(x1, y1+20+8*zeitlinien, x2,y1+20+8*zeitlinien);
                        g2.drawString("14", x1+5,y1+20+8*zeitlinien-2);
                        g2.drawLine(x1, y1+20+9*zeitlinien, x2,y1+20+9*zeitlinien);
                        g2.drawString("15", x1+5,y1+20+9*zeitlinien-2);
                        g2.drawLine(x1, y1+20+10*zeitlinien, x2,y1+20+10*zeitlinien);
                        g2.drawString("16", x1+5,y1+20+10*zeitlinien-2);
                        g2.drawLine(x1, y1+20+11*zeitlinien, x2,y1+20+11*zeitlinien);
                        g2.drawString("17", x1+5,y1+20+11*zeitlinien-2);
                        g2.drawString("18", x1+5,y1+20+12*zeitlinien-2);
                        //g.drawLine(x1, y1+12*zeitlinien, x2,y1+12*zeitlinien);
                        // Die TN's darstellen
                        
                        
                    
                   
                            try {
                                PreparedStatement pstatement = connection.prepareStatement("SELECT * FROM TN WHERE DATUM  =? AND MITARBEITER= ? ORDER BY DATUM ASC");
                                pstatement.setDate(1,new java.sql.Date(kalendertag.getTimeInMillis()));
                                pstatement.setString(2, mitarbeiter.such);
                                ResultSet rs = pstatement.executeQuery();
                                while (rs.next()) 
                                   {
                                      //System.out.println(rs.getString(1));
                                       //Uhrzeit-7 Uhr = Beginn * zeitlinien
                                       Time siebenUhr=Time.valueOf("07:00:00");
                                       float differenz=(rs.getTime(5).getTime()-siebenUhr.getTime());
                                       differenz=differenz/1000/60/60;
                                       differenz=differenz *zeitlinien;
                                       float differenz2=(rs.getTime(6).getTime()-rs.getTime(5).getTime());
                                       differenz2=differenz2/1000/60/60;
                                       differenz2=differenz2*zeitlinien;
                                       System.out.println(rs.getString(2)+"/"+rs.getDate(3)+"/"+rs.getString(4)+"/"+rs.getTime(5)+"/"+rs.getTime(6)+"/"+differenz+"/"+differenz2);
                                       g2.setColor(Color.lightGray);
                                       g2.fillRect(x1, y1+20+(int) differenz, spalte/2,(int)differenz2);                                               
                                       g2.setColor(Color.BLACK);
                                       g2.drawRect(x1, y1+20+(int) differenz, spalte/2,(int)differenz2);      
                                       g2.drawString(rs.getString(4),x1,y1+30+(int)differenz ); 
                                       //g.fillRect(x1,y1+20+,zeile,20);
                                   }   
                                    //ENDe TN'S
                                
                                // Urlaub                              
                                pstatement = connection.prepareStatement("SELECT * FROM URLAUB WHERE DATUM  =? AND MITARBEITER= ? ORDER BY DATUM ASC");
                                pstatement.setDate(1,new java.sql.Date(kalendertag.getTimeInMillis()));
                                pstatement.setString(2, mitarbeiter.such);
                                rs = pstatement.executeQuery();
                                while (rs.next())
                                 { g2.setColor(new Color(50,205,50));
                                   g2.fillRect(x1, y1+20+1*zeitlinien, spalte/2,9*zeitlinien);                                               
                                   g2.setColor(Color.BLACK);
                                   g2.drawRect(x1, y1+20+1*zeitlinien, spalte/2,9*zeitlinien);      
                                 }                                
                                 //ENDE Urlaub
                                //Krankheit
                                  pstatement = connection.prepareStatement("SELECT * FROM KRANKHEIT WHERE DATUM  =? AND MITARBEITER= ? ORDER BY DATUM ASC");
                                pstatement.setDate(1,new java.sql.Date(kalendertag.getTimeInMillis()));
                                pstatement.setString(2, mitarbeiter.such);
                                rs = pstatement.executeQuery();
                                while (rs.next())
                                 { g2.setColor(new Color(0,139,69));
                                   g2.fillRect(x1, y1+20+1*zeitlinien, spalte/2,9*zeitlinien);                                               
                                   g2.setColor(Color.BLACK);
                                   g2.drawRect(x1, y1+20+1*zeitlinien, spalte/2,9*zeitlinien);  
                                   g2.drawString("Krank",x1,y1+30+zeitlinien); 
                                 }   
                                //Ende Krankheit
                                //Exchange
                              
                                pstatement = connection.prepareStatement("SELECT * FROM EXCHANGECAL WHERE DATUM  =? AND MITARBEITER= ? ORDER BY DATUM ASC");
                                pstatement.setDate(1,new java.sql.Date(kalendertag.getTimeInMillis()));
                                pstatement.setString(2, mitarbeiter.such);
                                rs = pstatement.executeQuery();
                                while (rs.next())
                                {   
                                     Time siebenUhr=Time.valueOf("07:00:00");
                                     Time siebenUhrAbends=Time.valueOf("19:00:00");
                                     long von=rs.getTime(3).getTime();
                                     if (von<siebenUhr.getTime()) {
                                          von=siebenUhr.getTime();
                                      }
                                      long bis=rs.getTime(4).getTime();
                                     if (bis>siebenUhrAbends.getTime()) {
                                          bis=siebenUhrAbends.getTime();
                                      }
                                       float differenz=(von-siebenUhr.getTime());
                                       differenz=differenz/1000/60/60;
                                       differenz=differenz *zeitlinien;
                                       float differenz2=(bis-von);
                                       differenz2=differenz2/1000/60/60;
                                       differenz2=differenz2*zeitlinien;
                                       //System.out.println(rs.getString(2)+"/"+rs.getDate(3)+"/"+rs.getString(4)+"/"+rs.getTime(5)+"/"+rs.getTime(6)+"/"+differenz+"/"+differenz2);
                                       g2.setColor(Color.lightGray);
                                       g2.fillRect(x1+spalte/2, y1+20+(int) differenz, spalte/2,(int)differenz2);                                               
                                       g2.setColor(Color.BLACK);
                                       g2.drawRect(x1+spalte/2, y1+20+(int) differenz, spalte/2,(int)differenz2);      
                                       g2.drawString(rs.getString(5),x1+spalte/2,y1+30+(int)differenz ); 
                                       
                                }
                                //Ende Exchange
                                
                                   //System.out.println(df.format(kalendertag.getTime()));  
                                
                            } catch (SQLException ex) {
                               MyException(ex.toString());
                            }
                     kalendertag.add(kalendertag.DAY_OF_MONTH,1);
                    }
                
                }
                             
                             
                             
                             
                             
                             
                             
                             
                            }
                            }
                        }
               
              
              
                /*g.drawLine(spalte, 0, spalte, ymax);
                g.drawLine(2*spalte, 0, 2*spalte, ymax);
                g.drawLine(3*spalte, 0, 3*spalte, ymax);
                g.drawLine(4*spalte, 0, 4*spalte, ymax);
                g.drawLine(5*spalte, 0, 5*spalte, ymax);
                g.drawLine(6*spalte, 0, 6*spalte, ymax);
                g.drawLine(0, zeile, xmax, zeile);
                g.drawLine(0, 2*zeile, xmax, 2*zeile);
                g.drawLine(0, 3*zeile, xmax, 3*zeile);
                g.drawLine(0, 4*zeile, xmax, 4*zeile);*/
                
               
            



        }
    }
  
class ColorTableCellRenderer extends DefaultTableCellRenderer{
    public Component getTableCellRendererComponent(JTable table, Object value,
          	boolean isSelected, boolean hasFocus, int row, int column) {
        try {
            super.getTableCellRendererComponent(table, value, isSelected,
                    hasFocus, row, column);
            //Color color = (Color)value;
            //setText( color.getRed() + ", " + color.getBlue() + ", " + color.getGreen() );
            Color old = table.getBackground();
            float Wert1 =Float.parseFloat(table.getValueAt(row, 1).toString());
            float Wert3 =Float.parseFloat(table.getValueAt(row, 3).toString());
            float Wert4 =Float.parseFloat(table.getValueAt(row, 4).toString());
            Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("EEE d.MM.yy", Locale.GERMANY);
            cal.setTime(sdf.parse(table.getValueAt(row, 0).toString()));
            if ((Wert1 >6.5) || (Wert3>6.5) || (Wert4>6.5))
            {
                if (isSelected) { setForeground(Color.BLACK);}
                if (row %2 ==0)
                {
                    setBackground(new Color(152,251,152));
                }    
                else
                {
                    setBackground(new Color(144,238,144));
                }
            }
            else
            {
                setBackground(old);
            }
                
            if ((cal.get(Calendar.DAY_OF_WEEK)==1)||(cal.get(Calendar.DAY_OF_WEEK)==7))
            {     
                setBackground(Color.YELLOW);                   
            }   
            
            return this;
        } catch (ParseException ex) {
            Logger.getLogger(TNCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    return (table);
    }
    

}
  
   private void DBInit() {
        try {
            //Datenbank
            String DB_COMMAND;
            String dbversion = "";
            PreparedStatement pstmt;
            Connection connection = DB_CONNECT();
            ResultSet resultSet = connection.getMetaData().getTables("%", "%", "%", new String[]{"TABLE"});
            int columnCnt = resultSet.getMetaData().getColumnCount();
            boolean shouldCreateTableTN = true;
            boolean shouldCreateTableInitValues = true;
            boolean shouldCreateTableExchangeCal = true;
            boolean shouldCreateTableUrlaub = true;
            boolean shouldCreateTableKrankheit = true;
            
            Statement statement;
            while (resultSet.next()) {
                if (resultSet.getString("TABLE_NAME").equalsIgnoreCase("INITVALUES")) {
                    shouldCreateTableInitValues = false;
                }
                if (resultSet.getString("TABLE_NAME").equalsIgnoreCase("TN")) {
                    shouldCreateTableTN = false;
                }
                if (resultSet.getString("TABLE_NAME").equalsIgnoreCase("URLAUB")) {
                    shouldCreateTableUrlaub = false;
                }
                if (resultSet.getString("TABLE_NAME").equalsIgnoreCase("EXCHANGECAL")) {
                    shouldCreateTableExchangeCal = false;
                }
                  if (resultSet.getString("TABLE_NAME").equalsIgnoreCase("KRANKHEIT")) {
                    shouldCreateTableKrankheit = false;
                }
               
            }
            resultSet.close();
            //Tabelle Erzeugen wenn noch nicht da
            if (shouldCreateTableInitValues) {
                //System.out.println("Creating Table InitValues...");
                statement = connection.createStatement();
                statement.execute("create table INITVALUES (HOST varchar(50),PORT integer, MANDANT varchar(50),PASSWORT varchar(20), Version Varchar(10),EXCHANGE Varchar(100),EXCHANGEUSER Varchar(100), EXCHANGEPASS Varchar(100) )");
                DB_COMMAND = "UPDATE INITVALUES Set  version=? ";
                statement.close();
                // Und neune Datensatz schreiben
                DB_COMMAND = "INSERT INTO INITVALUES VALUES(?,?,?,?,?,?,?,?)";
                pstmt = connection.prepareStatement(DB_COMMAND);
                pstmt.clearParameters();
                pstmt.setString(1, "ap");
                pstmt.setInt(2, 6550);
                pstmt.setString(3, "ap-gmbh-kg");
                pstmt.setString(4, "");
                pstmt.setString(5, "1.0");
                pstmt.setString(6, "https://topas.abas-projektierung.local/ews/Exchange.asmx");
                pstmt.setString(7, "");
                pstmt.setString(8, "");
                pstmt.executeUpdate();
            }
            if (shouldCreateTableTN) {
                // System.out.println("Creating Table TN...");
                statement = connection.createStatement();
                statement.execute("create table TN (ID Integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY,MITARBEITER varchar(100) ,DATUM Date ,KUNDE varchar(100) ,VON Time,BIS Time)");

                statement.close();
            }
            if (shouldCreateTableUrlaub) {
                // System.out.println("Creating Table TN...");
                statement = connection.createStatement();
                statement.execute("create table URLAUB (ID Integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY,Mitarbeiter varchar(100),datum Date)");

                statement.close();
            }
             if (shouldCreateTableKrankheit) {
                // System.out.println("Creating Table TN...");
                statement = connection.createStatement();
                statement.execute("create table KRANKHEIT (ID Integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY,Mitarbeiter varchar(100),datum Date)");

                statement.close();
            }
           
            if (shouldCreateTableExchangeCal) {
                //System.out.println("Creating Table TNARCHIV...");
                statement = connection.createStatement();
                statement.execute("create table EXCHANGECAL (MITARBEITER varchar(100),DATUM Date, Von TIME, Bis TIME,Subject varchar(100))");
                statement.close();
            }
             // Fortlaufende Update Routine- Versionsfeld ist drin, also kann ich in einer While Schleife alle Änderungen durchlaufen bis auf aktuelle Version
            statement = connection.createStatement();
            resultSet = statement.executeQuery("select version from INITVALUES ");
            if (resultSet.next()) {
                dbversion = resultSet.getString(1);
            }
            {
                while (!dbversion.equals(GlobalVars.version)) {
                    if (dbversion.equals("1.1")) {
                        // Kubduget und Arbpaket einfügen
                        statement.execute("ALTER TABLE TN ADD Kubudget  Varchar(15) Default ''");
                        statement.execute("ALTER TABLE TN ADD arbpaket  Varchar(15) Default ''");
                        statement.execute("ALTER TABLE TNARCHIV ADD Kubudget  Varchar(15) Default ''");
                        statement.execute("ALTER TABLE TNARCHIV ADD arbpaket  Varchar(15) Default ''");
                        DB_COMMAND = "UPDATE INITVALUES Set  version=? ";

                        dbversion = "1.2";
                    }
                  
                  
                }
            }
            // Version in der DB hochsetzen
            DB_COMMAND = "UPDATE INITVALUES Set  version=? ";
            pstmt = connection.prepareStatement(DB_COMMAND);
            pstmt.clearParameters();
            pstmt.setString(1, GlobalVars.version);
            pstmt.executeUpdate();
            statement.close();
            connection.close();
        } catch (SQLException ex) {
              MyException(ex.toString());
        }

    }
   
     private void InitValues_READ() {
        // InitValues aus DB INITVALUES lesen und zuweisen
        try {
            Connection connection = DB_CONNECT();
            java.sql.Statement xstatement = connection.createStatement();
            ResultSet dbresultSet = xstatement.executeQuery("SELECT * FROM INITVALUES");
            if (dbresultSet.next()) {
                GlobalVars.edpHost = dbresultSet.getString(1);
                GlobalVars.edpPort = Integer.parseInt(dbresultSet.getString(2));
                GlobalVars.edpMandant = dbresultSet.getString(3);
                GlobalVars.edpPasswort = dbresultSet.getString(4);
                GlobalVars.exchange = dbresultSet.getString(6);
                GlobalVars.exchuser = dbresultSet.getString(7);
                GlobalVars.exchpass = dbresultSet.getString(8);
                connection.close();
                }
        } catch (SQLException ex) {
            Logger.getLogger(Einstellungen.class.getName()).log(Level.SEVERE, null, ex);
            MyException(ex.toString());
        }
    }
     
     
      private void InitValues_WRITE() {

        PreparedStatement pstmt;
        String DB_COMMAND;
        try {
            // Einstellungen in DB schreiben
            Connection connection = DB_CONNECT();
            java.sql.Statement xstatement = connection.createStatement();
            ResultSet dbresultSet = xstatement.executeQuery("SELECT * FROM INITVALUES");
            if (dbresultSet.next()) 
                {
                DB_COMMAND = "UPDATE INITVALUES Set  Host=?, PORT=?, MANDANT=?,PASSWORT=?,EXCHANGE=?,EXCHANGEUSER=?,EXCHANGEPASS=?";
                pstmt = connection.prepareStatement(DB_COMMAND);
                pstmt.clearParameters();
                pstmt.setString(1, GlobalVars.edpHost);
                pstmt.setInt(2, GlobalVars.edpPort);
                pstmt.setString(3, GlobalVars.edpMandant);
                pstmt.setString(4, GlobalVars.edpPasswort);
                pstmt.setString(5, GlobalVars.exchange);
                pstmt.setString(6, GlobalVars.exchuser);
                pstmt.setString(7, GlobalVars.exchpass);
                pstmt.executeUpdate();
                connection.close();
                } 
            dbresultSet.close();
            xstatement.close();

            } catch (SQLException ex) {
                MyException(ex.toString());
                }
        }
   
   private void MyException(String exString) {

        JOptionPane.showMessageDialog(this, "Es ist ein Fehler aufgetreten\n\n" + exString, "Java Excpetion", JOptionPane.ERROR_MESSAGE);
    }

   
   
   private Connection DB_CONNECT() {
        try {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            Properties properties = new Properties();
            Connection connection;
            //connection = DriverManager.getConnection("jdbc:derby:C:/Users/Guenter/invoiceit/invoiceIT;create=true", properties);
            connection = DriverManager.getConnection("jdbc:derby:database;create=true", properties);
            return connection;

        } catch (SQLException ex) {

          
            JOptionPane.showMessageDialog(this, "Datenbank konnte nicht gestartet werden !\n Datenbank ist belegt", "ERROR", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
           
            JOptionPane.showMessageDialog(this, "Datenbanktreiber wurde nicht gefunden! ", "ERROR", JOptionPane.ERROR_MESSAGE);


        }
        return null;

    }
   
   class MitarbeiterX {

        private String such;
        private String name;
        private String id;
        private String email;
        

        public  MitarbeiterX(String such,
                String name,
                String id,
                String email
                ) {
            this.such = such;
            this.name = name;
            this.id = id;
            this.email = email;
            
        }
        
        @Override
        public String toString() {
            String retValue = "";
            
                retValue = name;
                        return retValue;
            }
            
        
   }
   
 
 

 
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TNCheckerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TNCheckerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TNCheckerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TNCheckerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TNCheckerUI().setVisible(true);
            }
        });
        
        
        
    }

    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jCalPanelMain;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTree jTree1;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerVon;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerbis;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
